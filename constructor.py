from constants import *
from discord.ui import Select, View, Modal, TextInput, button, Button
from json_func import private_threads, save_private_threads
from discord import TextStyle, Interaction, CategoryChannel, SelectOption, TextChannel, ChannelType, Thread, ButtonStyle, SelectMenu
from discord.errors import NotFound
from datetime import datetime

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–µ—Ç–æ–∫ (–∫–ª—é—á: ID –≤–µ—Ç–∫–∏, –∑–Ω–∞—á–µ–Ω–∏–µ: {"thread": –æ–±—ä–µ–∫—Ç –≤–µ—Ç–∫–∏, "creator": —Å–æ–∑–¥–∞—Ç–µ–ª—å})
threads = {}

# –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞—è–≤–∫–∏
class FormModal(Modal, title="–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Å–µ–º—å—é"):
		# –ü–æ–ª—è —Ñ–æ—Ä–º—ã
		name = TextInput(label="–ò–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç:", required=True)
		rp_experience = TextInput(
				label="–°–æ—Å—Ç–æ—è–ª –≤ —Å–µ–º—å—è—Ö/—Å—Ç–∞–∫–∞—Ö:",
				required=True,
				style=TextStyle.paragraph,
		)
		shooting = TextInput(
				label="–û–ø—ã—Ç –∏–≥—Ä—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:",
				required=True,
				style=TextStyle.paragraph,
		)
		lvl_online = TextInput(
				label="–°–µ—Ä–≤–µ—Ä–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ 2 —É—Ä–æ–≤–Ω—è:",
				required=True,
		)
		family_experience = TextInput(
				label="–í–∏–¥–µ–æ–∑–∞–ø–∏—Å–∏ —Å—Ç—Ä–µ–ª—å–±—ã:",
				required=True,
				style=TextStyle.paragraph,
		)

		async def on_submit(self, interaction: Interaction):
				"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã."""
				try:
						# –ü–æ–ª—É—á–∞–µ–º –≥–∏–ª—å–¥–∏—é (—Å–µ—Ä–≤–µ—Ä)
						guild = interaction.guild
						if not guild:
								await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞! –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
								return

						# –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≥–¥–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –∫–∞–Ω–∞–ª—ã
						category = guild.get_channel(CATEGORY_ID)
						if not category or not isinstance(category, CategoryChannel):
								await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞! –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
								return

						# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
						channel_name = f"–∑–∞—è–≤–∫–∞-{self.name.value.lower().replace(' ', '-')}"
						new_channel = await guild.create_text_channel(
								name=channel_name,
								category=category,
								reason="–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏"
						)

						# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
						role = guild.get_role(ROLE_ID)
						if not role:
								await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞! –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
								return

						# –ó–∞–ø—Ä–µ—â–∞–µ–º –¥–æ—Å—Ç—É–ø –≤—Å–µ–º, –∫—Ä–æ–º–µ —Ä–æ–ª–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É
						await new_channel.set_permissions(guild.default_role, view_channel=False)
						await new_channel.set_permissions(role, view_channel=True)
						await new_channel.set_permissions(interaction.user, view_channel=True)  # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

						# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π
						formatted_message = (
								f"**–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ!**\n\n"
								f"üë§ **–ò–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç:** {self.name.value}\n"
								f"üéÆ **–°–æ—Å—Ç–æ—è–ª –≤ —Å–µ–º—å—è—Ö/—Å—Ç–∞–∫–∞—Ö:** {self.rp_experience.value}\n"
								f"üî´ **–û–ø—ã—Ç –∏–≥—Ä—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:** {self.shooting.value}\n"
								f"‚è≥ **–°–µ—Ä–≤–µ—Ä–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ 2 —É—Ä–æ–≤–Ω—è:** {self.lvl_online.value}\n"
								f"üè† **–í–∏–¥–µ–æ–∑–∞–ø–∏—Å–∏ —Å—Ç—Ä–µ–ª—å–±—ã:** {self.family_experience.value}\n\n"
								f"{role.mention} {interaction.user.mention}"  # –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–æ–ª–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
						)

						# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
						await new_channel.send(formatted_message)
						await interaction.response.send_message("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", ephemeral=True)

				except Exception as e:
						print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {e}")
						await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.", ephemeral=True)


class ChannelSelect(Select):
		def __init__(self):
				super().__init__(
						placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ç–∫–∏",
						options=[
								SelectOption(
										label="–ö–∞–ø—Ç-–∞—Ä—Ö–∏–≤",
										value=str(CHANNEL_1_ID),  # ID –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
								),
								SelectOption(
										label="–ú–∫–ª-–∞—Ä—Ö–∏–≤",
										value=str(CHANNEL_2_ID),  # ID –≤—Ç–æ—Ä–æ–≥–æ –∫–∞–Ω–∞–ª–∞
								),
						],
				)

		async def callback(self, interaction: Interaction):
				# –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
				selected_channel_id = int(self.values[0])
				selected_channel = interaction.guild.get_channel(selected_channel_id)

				if not selected_channel:
						await interaction.response.send_message(
								"‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True
						)
						return

				# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–µ—Ç–∫–∏
				await interaction.response.send_modal(CreateThreadModal(selected_channel))

class CreateThreadModal(Modal, title="–°–æ–∑–¥–∞—Ç—å –≤–µ—Ç–∫—É"):
		def __init__(self, channel: TextChannel):
				super().__init__()
				self.channel = channel  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª

		thread_name = TextInput(label="–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏", required=True)

		async def on_submit(self, interaction: Interaction):
				# –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ
				thread = await self.channel.create_thread(
						name=self.thread_name.value,
						type=ChannelType.public_thread,
				)

				# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ç–∫—É –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä—å
				threads[thread.id] = {"thread": thread, "creator": interaction.user}

				await interaction.response.send_message(
						f"‚úÖ –í–µ—Ç–∫–∞ '{self.thread_name.value}' —Å–æ–∑–¥–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ {self.channel.mention}!",
						ephemeral=True,
				)

class ThreadSelect(Select):
		def __init__(self, threads: list[Thread]):
				options = [
						SelectOption(
								label=f"{thread.parent.name if thread.parent else 'Unknown'} - {thread.name}",  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏ –≤–µ—Ç–∫–∏
								value=str(thread.id),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –≤–µ—Ç–∫–∏ –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ
						)
						for thread in threads
				]
				super().__init__(
						placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∫–∞—Ç–∞",
						options=options,
				)

		async def callback(self, interaction: Interaction):
				# –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–µ—Ç–∫—É
				selected_thread_id = int(self.values[0])
				selected_thread = interaction.guild.get_thread(selected_thread_id)

				if not selected_thread:
						await interaction.response.send_message(
								"‚ùå –í–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", ephemeral=True
						)
						return

				# –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –æ—Ç–∫–∞—Ç–∞
				await interaction.response.send_modal(RollbackForm(selected_thread))

class ApplicationChannelButtons(View):
		def __init__(self):
				super().__init__(timeout=None)  # timeout=None –¥–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≤—Å–µ–≥–¥–∞

		@button(label="üìù–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", style=ButtonStyle.primary)
		async def submit_application_button(self, interaction: Interaction, button: Button):
				"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏."""
				# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
				await interaction.response.send_modal(FormModal())

class ThreadSelectView(View):
    def __init__(self, threads_channel_1=None, threads_channel_2=None):
        super().__init__()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if threads_channel_1 is None:
            threads_channel_1 = []
        if threads_channel_2 is None:
            threads_channel_2 = []

        # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –≤–µ—Ç–æ–∫ –∏–∑ –∫–∞–Ω–∞–ª–∞ 1
        if threads_channel_1:
            # –†–∞–∑–¥–µ–ª—è–µ–º –≤–µ—Ç–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 25
            for i in range(0, len(threads_channel_1), 25):
                group = threads_channel_1[i:i + 25]  # –ë–µ—Ä–µ–º —Å—Ä–µ–∑ –∏–∑ 25 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                options_channel_1 = [SelectOption(label=thread.name, value=str(thread.id)) for thread in group]
                select_channel_1 = Select(
                    custom_id=f"channel_1_select_{i}",
                    placeholder=f"–ö–ê–ü–¢(—á–∞—Å—Ç—å {i // 25 + 1})",
                    options=options_channel_1
                )
                select_channel_1.callback = self.on_select_channel_1
                self.add_item(select_channel_1)

        # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –≤–µ—Ç–æ–∫ –∏–∑ –∫–∞–Ω–∞–ª–∞ 2
        if threads_channel_2:
            # –†–∞–∑–¥–µ–ª—è–µ–º –≤–µ—Ç–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 25
            for i in range(0, len(threads_channel_2), 25):
                group = threads_channel_2[i:i + 25]  # –ë–µ—Ä–µ–º —Å—Ä–µ–∑ –∏–∑ 25 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                options_channel_2 = [SelectOption(label=thread.name, value=str(thread.id)) for thread in group]
                select_channel_2 = Select(
                    custom_id=f"channel_2_select_{i}",
                    placeholder=f"–ú–ö–õ(—á–∞—Å—Ç—å {i // 25 + 1})",
                    options=options_channel_2
                )
                select_channel_2.callback = self.on_select_channel_2
                self.add_item(select_channel_2)

    async def on_select_channel_1(self, interaction: Interaction):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–µ—Ç–∫–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ 1
        selected_thread_id = int(interaction.data["values"][0])  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π ID –≤–µ—Ç–∫–∏
        selected_thread = interaction.guild.get_thread(selected_thread_id)
        if selected_thread:
            await interaction.response.send_modal(RollbackForm(selected_thread))
        else:
            await interaction.response.send_message("‚ùå –í–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)

    async def on_select_channel_2(self, interaction: Interaction):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–µ—Ç–∫–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ 2
        selected_thread_id = int(interaction.data["values"][0])  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π ID –≤–µ—Ç–∫–∏
        selected_thread = interaction.guild.get_thread(selected_thread_id)
        if selected_thread:
            await interaction.response.send_modal(RollbackForm(selected_thread))
        else:
            await interaction.response.send_message("‚ùå –í–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)

class MainChannelButtons(View):
    def __init__(self):
        super().__init__(timeout=None)  # timeout=None –¥–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≤—Å–µ–≥–¥–∞

    @button(label="üóÉÔ∏è–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–∞—Ç", style=ButtonStyle.success, custom_id="send_rollback_button")
    async def send_rollback_button(self, interaction: Interaction, button: Button):
        try:
            # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            await interaction.response.defer(ephemeral=True)

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–∞ –∫–∞–Ω–∞–ª–∞
            channel_1 = interaction.guild.get_channel(CHANNEL_1_ID)
            channel_2 = interaction.guild.get_channel(CHANNEL_2_ID)

            if not channel_1 or not channel_2:
                await interaction.followup.send("‚ùå –û–¥–∏–Ω –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
                return

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–µ—Ç–∫–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ 1 –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            threads_channel_1 = sorted(
                [thread for thread in channel_1.threads if not thread.archived],
                key=lambda x: x.created_at,  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
                reverse=True  # –°–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ
            )

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–µ—Ç–∫–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ 2 –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            threads_channel_2 = sorted(
                [thread for thread in channel_2.threads if not thread.archived],
                key=lambda x: x.created_at,  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
                reverse=True  # –°–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–µ—Ç–∫–∏ –≤ –∫–∞–Ω–∞–ª–∞—Ö
            if not threads_channel_1 and not threads_channel_2:
                await interaction.followup.send("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ç–æ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö!", ephemeral=True)
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º–∏ —Å–ø–∏—Å–∫–∞–º–∏
            view = ThreadSelectView(threads_channel_1, threads_channel_2)
            await interaction.followup.send("–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∫–∞—Ç–∞:", view=view, ephemeral=True)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. 4444", ephemeral=True)

    @button(label="–°–æ–∑–¥–∞—Ç—å –≤–µ—Ç–∫—É", style=ButtonStyle.primary, custom_id="create_thread_button")
    async def create_thread_button(self, interaction: Interaction, button: Button):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not interaction.user.guild_permissions.administrator:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ç–æ–∫!", ephemeral=True)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
        view = View()
        view.add_item(ChannelSelect())
        await interaction.response.send_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ç–∫–∏:", view=view, ephemeral=True
        )
				
class RollbackForm(Modal, title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–∞—Ç"):
		def __init__(self, thread: Thread):
				super().__init__()
				self.thread = thread  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–µ—Ç–∫–∏

		player_name = TextInput(label="–í–∞—à–µ –∏–º—è", required=True)
		rollback_details = TextInput(
				label="–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–∞—Ç–∞",
				style=TextStyle.paragraph,
				required=True,
		)

		async def on_submit(self, interaction: Interaction):
				await interaction.response.defer(ephemeral=True)  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è

				try:
						# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ—Ç–∫–∞—Ç–∞
						formatted_message = (
								f"{self.rollback_details.value}\n\n"
								f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {interaction.user.mention}"
						)

						# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–µ—Ç–∫—É
						await self.thread.send(formatted_message)

						# –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—É—é –≤–µ—Ç–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
						private_channel = interaction.guild.get_channel(PRIVATE_CHANNEL_ID)
						if not private_channel:
								await interaction.followup.send("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≤–µ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
								return

						# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –≤–µ—Ç–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
						if str(interaction.user.id) in private_threads:
								# –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–µ—Ç–∫—É
								thread_id = private_threads[str(interaction.user.id)]
								private_thread = interaction.guild.get_thread(thread_id)
								if not private_thread:
										# –ï—Å–ª–∏ –≤–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
										private_thread = await private_channel.create_thread(
												name=f"–õ–∏—á–Ω–æ–µ –¥–µ–ª–æ {interaction.user.name}",
												type=ChannelType.private_thread,
										)
										# –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä–µ –∏ JSON
										private_threads[str(interaction.user.id)] = private_thread.id
										save_private_threads(private_threads)
						else:
								# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–∏–≤–∞—Ç–Ω—É—é –≤–µ—Ç–∫—É
								private_thread = await private_channel.create_thread(
										name=f"–õ–∏—á–Ω–æ–µ –¥–µ–ª–æ {interaction.user.name}",
										type=ChannelType.private_thread,
								)
								# –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≤–µ—Ç–∫–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —Ä–æ–ª–∏
								await private_thread.add_user(interaction.user)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
								role = interaction.guild.get_role(PRIVATE_THREAD_ROLE_ID)
								if role:
										await private_thread.send(f"{role.mention}")  # –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–æ–ª–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
								# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ç–∫—É –≤ —Å–ª–æ–≤–∞—Ä–µ –∏ JSON
								private_threads[str(interaction.user.id)] = private_thread.id
								save_private_threads(private_threads)

						# –î—É–±–ª–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—É—é –≤–µ—Ç–∫—É
						await private_thread.send(formatted_message)

						# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
						await interaction.followup.send("‚úÖ –í–∞—à –æ—Ç–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –≤–∞—à–µ–π –ª–∏—á–Ω–æ–π –≤–µ—Ç–∫–µ!", ephemeral=True)

				except NotFound:
						print("–û—à–∏–±–∫–∞: –í–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞.")
						await interaction.followup.send(
								"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–∞—Ç. –í–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.", ephemeral=True
						)

				except Exception as e:
						print(f"–û—à–∏–±–∫–∞: {e}")
						await interaction.followup.send(
								"–æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å", ephemeral=True
						)
